I18n
====

.. image:: http://www.bdoubliees.com/journalspirou/sfigures6/schtroumpfs/s16.jpg

GNU gettext is used. Unlike many other methods, gettext supports plural forms.

Write internationalized messages in source code
-----------------------------------------------

``xitrum.Controller`` extends ``xitrum.I18n``, which has these methods:

::

  t("Message")
  tc("Context", "Message")

In other places like models, you need to pass the action to them and call
``t`` and ``tc`` on it:

::

  // In an action
  val errorMessageo = MyModel.validate(this, data)

  // In the model
  import xitrum.I18n
  object MyModel {
    // Returns None on success or Some(error message) on failure
    def validate(i18n: I18n, data: Data): Option[String] = {
      if (...) return Some(i18n.t("An error message))
      ...
    }
  }

Extract messages to pot files
-----------------------------

Create an empty i18n.pot file in your project's root directory, then recompile
the whole project.

::

  $ sbt clean
  $ rm i18n.pot
  $ touch i18n.pot
  $ sbt compile

``sbt clean`` is to delete all .class files, forcing SBT to recompile the whole
project. Because after ``sbt clean``, SBT will try to redownload all dependencies,
you can do a little faster with the command ``find target -name *.class -delete``,
which deletes all .class files in the ``target`` directory.

After the recompilation, i18n.pot will be filled with gettext messages extracted
from the source code. To do this magic, `Scala compiler plugin technique <http://www.scala-lang.org/node/140>`_
has been used.

One caveat of this method is that only gettext messages in Scala source code
files are extracted. If you have Java files, you may want to extract manually
using ``xgettext`` command line:

::

  $ xgettext -kt -ktc:1c,2 -ktn:1,2 -ktcn:1c,2,3 -o i18n_java.pot --from-code=UTF-8 $(find src/main/java -name "*.java")

Then you manually merge i18n_java.pot to i18n.pot.

Where to save po files
----------------------

i18n.pot is the template file. You need to copy it to <language>.po files and
translate.

::

  src
    main
      scala
        ...
      resources
        i18n
          en.po
          ja.po
          vi.po
          ...

Use a tool like `gedit <http://projects.gnome.org/gedit/>`_ to edit po files.
You can use it to merge newly created pot file to existing po files.

You can package po files in multiple JAR files. Xitrum will automatically merge
them when running.

::

  mylib.jar
    i18n
      en.po
      ja.po

  another.jar
    i18n
      en.po
      ja.po

Validation messages
-------------------

jQuery Validation plugin provides `i18n error messages <https://github.com/jzaefferer/jquery-validation/tree/master/localization>`_.
Xitrum automatically include the message file corresponding to the current language.

Plural forms
------------

::

  tn("Message", "Plural form", n)
  tcn("Context", "Message", "Plural form", n)

Xitrum can only work correctly with Plural-Forms exactly listed at:

* `What are plural forms <http://www.gnu.org/software/gettext/manual/html_node/Plural-forms.html#Plural-forms>`_
* `Translating plural forms <http://www.gnu.org/software/gettext/manual/html_node/Translating-plural-forms.html#Translating-plural-forms>`_

Your plural forms must be exactly one of the following:

::

  nplurals=1; plural=0
  nplurals=2; plural=n != 1
  nplurals=2; plural=n>1
  nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2
  nplurals=3; plural=n==1 ? 0 : n==2 ? 1 : 2
  nplurals=3; plural=n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2
  nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2
  nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2
  nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2
  nplurals=3; plural=n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2
  nplurals=4; plural=n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3
